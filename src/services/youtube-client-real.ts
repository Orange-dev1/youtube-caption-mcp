import { Innertube } from 'youtubei.js';
import type {
  VideoInfo,
  CaptionTrack,
  CaptionsList,
  CaptionSegment,
  CaptionsData,
  SearchResult,
  SearchResponse,
} from '../types/youtube.js';
import {
  VideoNotFoundError,
  CaptionsNotAvailableError,
  AccessDeniedError,
  NetworkError,
  SystemError,
} from '../types/errors.js';
import { formatDuration, formatNumber, formatDate, cleanCaptionText } from '../utils/formatters.js';
import { normalizeLanguageCode } from '../utils/validators.js';

export class RealYouTubeClient {
  private innertube: Innertube | null = null;
  private initPromise: Promise<void> | null = null;

  constructor() {
    this.initPromise = this.initialize();
  }

  private async initialize(): Promise<void> {
    try {
      console.debug('Initializing YouTube client...');
      this.innertube = await Innertube.create({
        lang: 'ja',
        location: 'JP',
        enable_session_cache: false,
      });
      console.debug('YouTube client initialized successfully');
    } catch (error) {
      console.error('Failed to initialize YouTube client:', error);
      throw new SystemError('YouTubeクライアントの初期化に失敗しました', {
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }

  private async ensureInitialized(): Promise<Innertube> {
    if (this.initPromise) {
      await this.initPromise;
      this.initPromise = null;
    }

    if (!this.innertube) {
      throw new SystemError('YouTubeクライアントが初期化されていません');
    }

    return this.innertube;
  }

  // 動画情報を取得
  async getVideoInfo(videoId: string): Promise<VideoInfo> {
    try {
      const yt = await this.ensureInitialized();
      console.debug(`Getting video info for: ${videoId}`);

      const info = await yt.getInfo(videoId);

      if (!info.basic_info) {
        throw new VideoNotFoundError(videoId);
      }

      const basicInfo = info.basic_info;

      // 動画が利用できない場合のチェック
      if (basicInfo.is_private) {
        throw new AccessDeniedError(videoId);
      }

      // 安全にプロパティにアクセス
      const duration = basicInfo.duration?.seconds || 0;
      const viewCount = basicInfo.view_count || 0;
      const title = basicInfo.title || 'タイトル不明';
      const description = basicInfo.short_description || '';
      const channelName = basicInfo.channel?.name || 'チャンネル不明';
      const uploadDate = basicInfo.upload_date || '';
      const thumbnails = basicInfo.thumbnail || [];
      const thumbnailUrl = thumbnails.length > 0 ? thumbnails[0].url : '';

      return {
        id: videoId,
        title,
        description,
        channel: channelName,
        duration: formatDuration(duration),
        publishedAt: formatDate(uploadDate),
        viewCount: formatNumber(viewCount),
        thumbnail: thumbnailUrl,
        language: 'ja',
      };
    } catch (error) {
      if (error instanceof VideoNotFoundError || error instanceof AccessDeniedError) {
        throw error;
      }

      console.error(`Error getting video info for ${videoId}:`, error);
      
      if (error instanceof Error && error.message.includes('network')) {
        throw new NetworkError('ネットワークエラーが発生しました', {
          videoId,
          error: error.message,
        });
      }

      throw new SystemError('動画情報の取得に失敗しました', {
        videoId,
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }

  // 利用可能な字幕一覧を取得
  async getCaptionsList(videoId: string): Promise<CaptionsList> {
    try {
      const yt = await this.ensureInitialized();
      console.debug(`Getting captions list for: ${videoId}`);

      const info = await yt.getInfo(videoId);

      if (!info.captions) {
        throw new CaptionsNotAvailableError(videoId);
      }

      const captionTracks = info.captions.caption_tracks;
      if (!captionTracks || captionTracks.length === 0) {
        throw new CaptionsNotAvailableError(videoId);
      }

      const availableCaptions: CaptionTrack[] = captionTracks.map(track => ({
        languageCode: track.language_code || 'unknown',
        languageName: track.name?.text || track.language_code || 'Unknown',
        isAutoGenerated: track.kind === 'asr',
        kind: track.kind || 'captions',
      }));

      return {
        videoId,
        availableCaptions,
        totalCount: availableCaptions.length,
      };
    } catch (error) {
      if (error instanceof CaptionsNotAvailableError) {
        throw error;
      }

      console.error(`Error getting captions list for ${videoId}:`, error);
      throw new SystemError('字幕一覧の取得に失敗しました', {
        videoId,
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }

  // 字幕データをダウンロード
  async downloadCaptions(
    videoId: string,
    language: string = 'ja',
    format: 'raw' | 'srt' | 'vtt' = 'raw'
  ): Promise<CaptionsData> {
    try {
      const yt = await this.ensureInitialized();
      const normalizedLang = normalizeLanguageCode(language);
      
      console.debug(`Downloading captions for: ${videoId}, lang: ${normalizedLang}, format: ${format}`);

      const info = await yt.getInfo(videoId);

      if (!info.captions) {
        throw new CaptionsNotAvailableError(videoId, normalizedLang);
      }

      // 指定された言語の字幕トラックを検索
      const captionTracks = info.captions.caption_tracks;
      if (!captionTracks) {
        throw new CaptionsNotAvailableError(videoId, normalizedLang);
      }

      let targetTrack = captionTracks.find(track => 
        track.language_code === normalizedLang
      );

      // 完全一致しない場合、部分一致を試す
      if (!targetTrack) {
        targetTrack = captionTracks.find(track => 
          track.language_code?.startsWith(normalizedLang.split('-')[0])
        );
      }

      // それでも見つからない場合、デフォルト言語を試す
      if (!targetTrack && normalizedLang !== 'ja') {
        targetTrack = captionTracks.find(track => 
          track.language_code === 'ja' || track.language_code?.startsWith('ja')
        );
      }

      if (!targetTrack) {
        throw new CaptionsNotAvailableError(videoId, normalizedLang);
      }

      // 字幕データを取得
      try {
        const transcript = await info.getTranscript();
        if (!transcript) {
          throw new CaptionsNotAvailableError(videoId, normalizedLang);
        }

        // セグメントデータを変換
        const segments: CaptionSegment[] = [];
        
        // transcript の構造を確認して適切にアクセス
        if (transcript.content && transcript.content.body && transcript.content.body.initial_segments) {
          transcript.content.body.initial_segments.forEach((segment: any) => {
            if (segment.start_ms !== undefined && segment.end_ms !== undefined && segment.snippet?.text) {
              segments.push({
                start: segment.start_ms / 1000,
                duration: (segment.end_ms - segment.start_ms) / 1000,
                text: cleanCaptionText(segment.snippet.text),
              });
            }
          });
        } else if (Array.isArray(transcript)) {
          // 配列形式の場合
          transcript.forEach((segment: any) => {
            if (segment.start !== undefined && segment.dur !== undefined && segment.text) {
              segments.push({
                start: segment.start,
                duration: segment.dur,
                text: cleanCaptionText(segment.text),
              });
            }
          });
        }

        if (segments.length === 0) {
          throw new CaptionsNotAvailableError(videoId, normalizedLang);
        }

        return {
          videoId,
          language: targetTrack.language_code || normalizedLang,
          format,
          isAutoGenerated: targetTrack.kind === 'asr',
          segments,
        };
      } catch (transcriptError) {
        console.error('Error getting transcript:', transcriptError);
        throw new CaptionsNotAvailableError(videoId, normalizedLang);
      }
    } catch (error) {
      if (error instanceof CaptionsNotAvailableError) {
        throw error;
      }

      console.error(`Error downloading captions for ${videoId}:`, error);
      throw new SystemError('字幕データのダウンロードに失敗しました', {
        videoId,
        language,
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }

  // 字幕付き動画を検索
  async searchVideosWithCaptions(
    query: string,
    language?: string,
    limit: number = 10
  ): Promise<SearchResponse> {
    try {
      const yt = await this.ensureInitialized();
      console.debug(`Searching videos with captions: ${query}, limit: ${limit}`);

      const searchResults = await yt.search(query, {
        type: 'video',
      });

      if (!searchResults.videos) {
        return {
          query,
          results: [],
          totalCount: 0,
        };
      }

      const results: SearchResult[] = [];
      const videos = searchResults.videos.slice(0, limit);

      for (const video of videos) {
        try {
          // 動画IDを安全に取得
          let videoId: string;
          if (typeof video.id === 'string') {
            videoId = video.id;
          } else if (video.id && typeof video.id === 'object' && 'videoId' in video.id) {
            videoId = (video.id as any).videoId;
          } else {
            continue; // IDが取得できない場合はスキップ
          }

          // 各動画の字幕情報を取得
          const captionsList = await this.getCaptionsList(videoId);
          
          // 指定された言語の字幕がある場合のみ結果に含める
          let includeCaptions = captionsList.availableCaptions;
          if (language) {
            const normalizedLang = normalizeLanguageCode(language);
            includeCaptions = captionsList.availableCaptions.filter(caption =>
              caption.languageCode === normalizedLang ||
              caption.languageCode.startsWith(normalizedLang.split('-')[0])
            );
          }

          if (includeCaptions.length > 0) {
            const title = video.title?.text || 'タイトル不明';
            const channelName = video.author?.name || 'チャンネル不明';
            const duration = video.duration?.seconds_total || 0;
            const thumbnails = video.thumbnails || [];
            const thumbnailUrl = thumbnails.length > 0 ? thumbnails[0].url : '';

            results.push({
              videoId,
              title,
              channel: channelName,
              duration: formatDuration(duration),
              thumbnail: thumbnailUrl,
              availableCaptions: includeCaptions,
            });
          }
        } catch (error) {
          // 個別の動画でエラーが発生しても検索全体は続行
          console.warn(`Failed to get captions for video:`, error);
        }
      }

      return {
        query,
        results,
        totalCount: results.length,
      };
    } catch (error) {
      console.error(`Error searching videos with captions:`, error);
      throw new SystemError('字幕付き動画の検索に失敗しました', {
        query,
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
}

// デフォルトのYouTubeクライアントインスタンス（実際のAPI版）
export const realYouTubeClient = new RealYouTubeClient();
